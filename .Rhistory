dt <- data.table(tx = 1:10, cust = 1:3, x = 1:6)
library(data.table)
dt <- data.table(tx = 1:10, cust = 1:3, x = 1:6)
dt
dt <- data.table(x = 1:5, cust = 1:3, x = 1:15)
dt
dt <- data.table(x = 1:5, y = 1:3, z = 1:15)
dt[, .N, by = .(.(x,y))]
dt[, .N, by = .(list(x,y))]
dt[, .N, by = list(unlist(list(x,y)))]
dt[, .N, .(x, y)]
ifunique <- function(x, ...) {
y <- list(...)
out <- c()
for(i in 1:length(y)) {
z <- y[[i]]
dt <- data.table(x, z)
dupe <- dt[, uniqueN(z), by = x][V1 > 1]
if(nrow(dupe) == 0) res <- TRUE else res <- FALSE
out <- c(out, res)
}
return(out)
}
dt[, ifunique(list(x, y), z)]
dt[, .N, by = list(x,  y)]
quote(x)
ifunique <- function(x, ...) {
y <- list(...)
out <- c()
for(i in 1:length(y)) {
z <- y[[i]]
dt <- data.table(x, z)
dupe <- dt[, uniqueN(z), by = deparse(substitute(x))][V1 > 1]
if(nrow(dupe) == 0) res <- TRUE else res <- FALSE
out <- c(out, res)
}
return(out)
}
dt[, .N, by = list(x,  y)]
dt[, ifunique(list(x, y), z)]
deparse(substitue(list(x, y)))
deparse(substitute(list(x, y)))
deparse(substitute(list(deparse(substitute(x), y)))
)
data.table(list(1:3, 3:5), 5:8)
data.table(unlist(list(1:3, 3:5)), 5:8)
ifunique <- function(x, y) {
# y <- list(...)
out <- c()
for(i in 1:length(y)) {
z <- y[[i]]
dt <- data.table(x, z)
dupe <- dt[, .N, by = .(x, z)][, .N, by = x][N > 1]
if(nrow(dupe) == 0) res <- TRUE else res <- FALSE
out <- c(out, res)
}
return(out)
}
dt[, ifunique(str_c(x,"|", y), z)]
dt[, ifunique(paste0(x,"|", y), z)]
dt[, ifunique(aa = paste0(x,"|", y), z)]
dt[, paste0(x,"|", y)]
do.call(rbind, list(x, y))
x <- 1:5
y <- 1:3
z <- 1:15
do.call(rbind, list(x, y))
do.call(rbindlist(), list(x, y))
do.call(cbind, list(x, y))
x <- dt$x
y <- dt$y
z < - dt$z
z <- dt$z
do.call(cbind, list(x, y))
ifunique <- function(x, ...) {
y <- list(...)
out <- c()
for(i in 1:length(y)) {
z <- y[[i]]
dt <- cbind(data.table(do.call(cbind, x)), z)
dupe <- dt[, uniqueN(z), by = x][V1 > 1]
if(nrow(dupe) == 0) res <- TRUE else res <- FALSE
out <- c(out, res)
}
return(out)
}
dt[, ifunique(list(x, y), z)]
cbind(data.table(do.call(cbind, x)), z)
data.table(do.call(cbind, x))
dt <- data.table(xx = 1:5, yy = 1:3, zz = 1:15)
xx <- dt$xx
yy <- dt$yy
zz <- dt$zz
aa <- list(xx, yy)
cbind(data.table(do.call(cbind, aa)), zz)
aa
fun1 <- function(list(...), y) {
return(names(...))
}
fun1 <- function(list(...), y) {
return(names(...))
}
fun1 <- function(list(x, ...), y) {
return(names(...))
}
class(aa)
dt[, .N, by = .(list(xx, yy), zz)]
dt[, .N, by = append(list(xx, yy), zz)]
?append
dt[, .N, by = list(unlist(list(xx, yy), zz))]
dt[, .N, by = list(xx, yy)]
dt[, .N, by = c("xx", "yy")]
list(xx)
data.table(list(xx))
ifunique <- function(x, ...) {
if(class(x) == "list") n <- length(x) else n <- 1
y <- list(...)
out <- c()
for(i in 1:length(y)) {
z <- y[[i]]
dt <- data.table(x, z)
dupe <- dt[, .N, by = c(str_c("V", 1:n), "z")][, .N, by = str_c("V", 1:n)][N > 1]
if(nrow(dupe) == 0) res <- TRUE else res <- FALSE
out <- c(out, res)
}
return(out)
}
dt[, ifunique(list(x, y), z)]
library(stringr)
ifunique <- function(x, ...) {
if(class(x) == "list") n <- length(x) else n <- 1
y <- list(...)
out <- c()
for(i in 1:length(y)) {
z <- y[[i]]
dt <- data.table(x, z)
dupe <- dt[, .N, by = c(paste0("V", 1:n), "z")][, .N, by = paste0("V", 1:n)][N > 1]
if(nrow(dupe) == 0) res <- TRUE else res <- FALSE
out <- c(out, res)
}
return(out)
}
dt[, ifunique(list(x, y), z)]
ifunique <- function(x, ...) {
if(class(x) == "list") n <- length(x) else n <- 1
y <- list(...)
out <- c()
for(i in 1:length(y)) {
z <- y[[i]]
dt <- data.table(do.call(cbind, x), z)
dupe <- dt[, .N, by = c(paste0("V", 1:n), "z")][, .N, by = paste0("V", 1:n)][N > 1]
if(nrow(dupe) == 0) res <- TRUE else res <- FALSE
out <- c(out, res)
}
return(out)
}
dt[, ifunique(list(x, y), z)]
n=2
c(paste0("V", 1:n), "z")
paste0("V", 1:n)
data.table(do.call(cbind, aa), zz)
data.table(do.call(cbind, xx), zz)
ifunique <- function(x, ...) {
if(class(x) == "list") n <- length(x) else {x <- list(x); n <- 1}
y <- list(...)
out <- c()
for(i in 1:length(y)) {
z <- y[[i]]
dt <- data.table(do.call(cbind, x), z)
dupe <- dt[, .N, by = c(paste0("V", 1:n), "z")][, .N, by = paste0("V", 1:n)][N > 1]
if(nrow(dupe) == 0) res <- TRUE else res <- FALSE
out <- c(out, res)
}
return(out)
}
dt[, ifunique(list(x, y), z)]
ifunique <- function(x, ...) {
if(class(x) == "list") n <- length(x) else {x <- list(x); n <- 1}
y <- list(...)
out <- c()
for(i in 1:length(y)) {
z <- y[[i]]
dt <- data.table(do.call(cbind, x), z)
dupe <- dt[, .N, by = eval(paste0("V", 1:n), "z")][, .N, by = paste0("V", 1:n)][N > 1]
if(nrow(dupe) == 0) res <- TRUE else res <- FALSE
out <- c(out, res)
}
return(out)
}
dt[, ifunique(list(x, y), z)]
data.table(do.call(cbind, xx), zz)
data.table(do.call(cbind, aa), zz)
data.table(do.call(cbind, list(xx)), zz)
data.table(do.call(cbind, aa), zz)][, .N, by = c(paste0("V", 1:2))]
data.table(do.call(cbind, aa), zz)][, .N, by = c(paste0("V", 1:2)))]
data.table(do.call(cbind, aa), zz)[, .N, by = c(paste0("V", 1:2)))]
data.table(do.call(cbind, aa), zz)[, .N, by = c(paste0("V", 1:2))]
data.table(do.call(cbind, aa), zz)[, .N, by = c(paste0("V", 1:2), "zz")]
dt[, ifunique(list(x, y), z)]
ifunique <- function(x, ...) {
if(class(x) == "list") n <- length(x) else {x <- list(x); n <- 1}
y <- list(...)
out <- c()
for(i in 1:length(y)) {
z <- y[[i]]
dt <- data.table(do.call(cbind, x), z)
print(dt)
dupe <- dt[, .N, by = c(paste0("V", 1:n), "z")][, .N, by = paste0("V", 1:n)][N > 1]
if(nrow(dupe) == 0) res <- TRUE else res <- FALSE
out <- c(out, res)
}
return(out)
}
dt[, ifunique(list(x, y), z)]
ifunique <- function(x, ...) {
if(class(x) == "list") n <- length(x) else {x <- list(x); n <- 1}
y <- list(...)
out <- c()
for(i in 1:length(y)) {
z <- y[[i]]
dt <- data.table(do.call(cbind, x), z)
print(dt)
dupe <- dt[, .N, by = eval(c(paste0("V", 1:n), "z"))][, .N, by = paste0("V", 1:n)][N > 1]
if(nrow(dupe) == 0) res <- TRUE else res <- FALSE
out <- c(out, res)
}
return(out)
}
dt[, ifunique(list(x, y), z)]
ifunique <- function(x, ...) {
if(class(x) == "list") n <- length(x) else {x <- list(x); n <- 1}
y <- list(...)
out <- c()
for(i in 1:length(y)) {
z <- y[[i]]
dt <- data.table(do.call(cbind, x), z)
print(dt)
dupe <- dt[, .N, by = c(paste0("V", 1:n), "z")]#[, .N, by = paste0("V", 1:n)][N > 1]
if(nrow(dupe) == 0) res <- TRUE else res <- FALSE
out <- c(out, res)
}
return(out)
}
dt[, ifunique(list(x, y), z)]
ifunique <- function(x, ...) {
if(class(x) == "list") n <- length(x) else {x <- list(x); n <- 1}
y <- list(...)
out <- c()
for(i in 1:length(y)) {
z <- y[[i]]
dt <- data.table(do.call(cbind, x), z)
print(dt)
dupe <- dt[, .N, by = c(paste0("V", 1:n), "z")][, .N, by = c(paste0("V", 1:n))][N > 1]
if(nrow(dupe) == 0) res <- TRUE else res <- FALSE
out <- c(out, res)
}
return(out)
}
dt[, ifunique(list(x, y), z)]
ifunique <- function(x, ...) {
if(class(x) == "list") n <- length(x) else {x <- list(x); n <- 1}
y <- list(...)
out <- c()
for(i in 1:length(y)) {
z <- y[[i]]
dt <- data.table(do.call(cbind, x), z)
dupe <- dt[, .N, by = c(paste0("V", 1:n), "z")][, .N, by = c(paste0("V", 1:n))][N > 1]
if(nrow(dupe) == 0) res <- TRUE else res <- FALSE
out <- c(out, res)
}
return(out)
}
dt[, ifunique(list(x, y), z)]
